horner:=proc(p,a)
	local i,n,H;
	n:=degree(p);
	H:=Matrix(3,n+1);
	H[2,1]:=a;
	for i from 0 to n do
		H[1,i+1]:=coeff(p,x,n-i);	
	end;
	H[3,1]:=H[1,1];
	for i from 1 to n do
		H[2,i+1]:=H[3,i]*a;
		H[3,i+1]:=H[1,i+1]+H[2,i+1];
	end;
	#printf("%10g\n\n",H);
	print(H);				
	H[3,n+1],add(H[3,i]*x^(n-i),i=1..n);	
end:

poly:=proc(roots::seq(rational))
local r,p,c,d;
p:=1;d:=();
for r in roots do		
	p:=p*(x-r);
end;
p:=expand(p);
c:=coeffs(p);
d:=();
for r in c do
	if nops(r)=2 then
	 	d:=d,op(r)[2];
	end;
end;	
lcm(d)*p;	
end:

zr:=proc(p)
local q,n;
q:=p;n:=0;
while coeff(q,x,0)=0 do
	n:=n+1;
	q:=simplify(q/x);
end;
n,q
end:

cand:=proc(p)
	local a,b,c,ax,bx;	
	a:=coeff(p,x,0);		
	a:=NumberTheory[Divisors](a);
	a:=op(a);
	b:=coeff(p,x,degree(p));	
	b:=NumberTheory[Divisors](b);
	b:=op(b);
	c:={};
	for ax in a do
		for bx in b do
			c:=c union {ax/bx};
		end
	end;	
	c:=op(sort([op(c)]));
	c,-c;	
end:

rat:=proc(poly)
	local nz,h,p,a,d,r,n,k;
	nz,p:=zr(poly);
	r:=0$nz;
	d:=cand(p);
	n:=degree(p);
	for a in d do
	 if k=n then break end;	
	 h:=horner(p,a);
	 while h[1]=0 do	
		k:=k+1;		
		p:=h[2];
		r:=r,a;
		print(p);
		if k=n then break end;				
		h:=horner(p,a);
	 end;
	end;
	return r;
end:

p:=poly(0$2,1,-1,1/2$2);
rat(p)
